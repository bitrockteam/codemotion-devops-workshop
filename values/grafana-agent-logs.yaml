agent:
  mounts:
    varlog: true
  clustering:
    enabled: false
  configMap:
    content: |
      discovery.kubernetes "pods" {
        role = "pod"
      }
        
      discovery.relabel "pod_logs" {
        targets = discovery.kubernetes.pods.targets
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          target_label  = "namespace"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          target_label  = "pod"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          target_label  = "container"
        }
        rule {
          source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_name"]
          separator     = "/"
          target_label  = "job"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
          separator     = "/"
          action        = "replace"
          replacement   = "/var/log/pods/*$1/*.log"
          target_label  = "__path__"
        }
      }
        
      local.file_match "pod_logs" {
        path_targets = discovery.relabel.pod_logs.output
      }
        
      loki.source.file "pod_logs" {
        targets    = local.file_match.pod_logs.targets
        forward_to = [loki.process.pod_logs.receiver]
      }
        
      // basic processing to parse the container format. You can add additional processing stages
      // to match your application logs.
      loki.process "pod_logs" {
        stage.match {
        selector = "{tmp_container_runtime=\"containerd\"}"
        // the cri processing stage extracts the following k/v pairs: log, stream, time, flags
        stage.cri {}
        // Set the extract flags and stream values as labels
        stage.labels {
          values = {
          flags   = "",
          stream  = "",
          }
        }
      }
      
      // if the label tmp_container_runtime from above is docker parse using docker
      stage.match {
        selector = "{tmp_container_runtime=\"docker\"}"
        // the docker processing stage extracts the following k/v pairs: log, stream, time
        stage.docker {}
        
        // Set the extract stream value as a label
        stage.labels {
          values = {
          stream  = "",
          }
        }
      }
      
        // drop the temporary container runtime label as it is no longer needed
        stage.label_drop {
          values = ["tmp_container_runtime"]
        }
      
        forward_to = [loki.write.loki.receiver]
      }
        
      loki.write "loki" {
        endpoint {
          url = "http://lgtm-loki-gateway:80/loki/api/v1/push"
        }
      }

controller:
  type: 'daemonset'
  replicas: 1

